---
export const prerender = false;

import db from '../../../lib/db.js';

const { id } = Astro.params;

if (Astro.request.method === 'POST') {
  try {
    await db.query('BEGIN');

    // 1. Obtener todos los ejemplares asociados a esta donación
    const ejemplaresResult = await db.query(`
      SELECT e.id 
      FROM ejemplares e
      JOIN items_donacion i ON e.libro_id = i.libro_id
      WHERE i.donacion_id = $1
    `, [id]);

    const ejemplaresIds = ejemplaresResult.rows.map(e => e.id);

    if (ejemplaresIds.length > 0) {
      // 2. Verificar si hay préstamos activos con estos ejemplares
      const prestamosActivos = await db.query(`
        SELECT COUNT(*) as count 
        FROM prestamos 
        WHERE ejemplar_id = ANY($1) AND devuelto = false
      `, [ejemplaresIds]);

      if (prestamosActivos.rows[0].count > 0) {
        await db.query('ROLLBACK');
        return new Response(JSON.stringify({
          error: 'No se puede eliminar la donación porque tiene ejemplares con préstamos activos'
        }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        });
      }

      // 3. Eliminar préstamos históricos
      await db.query(`
        DELETE FROM prestamos 
        WHERE ejemplar_id = ANY($1)
      `, [ejemplaresIds]);

      // 4. Eliminar los ejemplares
      await db.query(`
        DELETE FROM ejemplares 
        WHERE id = ANY($1)
      `, [ejemplaresIds]);
    }

    // 5. Eliminar items de la donación (ANTES que los libros)
    await db.query(`
      DELETE FROM items_donacion 
      WHERE donacion_id = $1
    `, [id]);

    // 6. Eliminar libros relacionados con la donación
    await db.query(`
      DELETE FROM libros 
      WHERE donacion_id = $1
    `, [id]);

    // 7. Eliminar la donación
    await db.query(`
      DELETE FROM donaciones 
      WHERE id = $1
    `, [id]);

    await db.query('COMMIT');

    // ✅ Redirección correcta sin 'redirect(...)'
    return new Response(null, {
      status: 303,
      headers: {
        Location: '/donaciones'
      }
    });

  } catch (error) {
    await db.query('ROLLBACK');
    console.error('Error al eliminar donación:', error);
    return new Response(JSON.stringify({
      error: 'Error interno al eliminar la donación'
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

// Redirección para métodos no POST
return new Response(null, {
  status: 303,
  headers: {
    Location: '/donaciones'
  }
});

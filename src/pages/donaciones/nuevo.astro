---
// src/pages/donaciones/nueva.astro
import db from '../../lib/db';
import AdminLayout from '../../layouts/AdminLayout.astro';

// 1. Configuración inicial
const estadosPermitidos = ['Ingresado', 'Recibido', 'Aceptado'];

// 2. Obtener datos necesarios
let donantes = [];
let usuarioAdminId = null;
let error = '';
let success = false;

try {
  // Obtener todos los donantes
  donantes = (await db.query('SELECT id, nombre FROM donantes ORDER BY nombre')).rows;
  
  // Obtener un usuario administrador
  const adminRes = await db.query(`SELECT id FROM usuarios WHERE rol = 'admin' LIMIT 1`);
  usuarioAdminId = adminRes.rows[0]?.id;
  
  // Fallback: usar el primer usuario disponible si no hay admin
  if (!usuarioAdminId) {
    const fallbackUser = await db.query('SELECT id FROM usuarios LIMIT 1');
    usuarioAdminId = fallbackUser.rows[0]?.id;
  }
} catch (e) {
  error = `Error al cargar datos iniciales: ${e.message}`;
  console.error(error);
}

// 3. Procesar el formulario POST
if (Astro.request.method === 'POST' && usuarioAdminId) {
  const form = await Astro.request.formData();
  const items = JSON.parse(form.get('items') || '[]');
  const fotos = form.getAll('foto_material');
  
  // Datos básicos
  let donante_id = form.get('donante_id');
  const nuevo_donante = form.get('nuevo_donante')?.trim();
  const tipo_material = form.get('tipo_material');
  const estado = form.get('estado');
  const observaciones = form.get('observaciones') || '';

  try {
    // Iniciar transacción
    await db.query('BEGIN');
    
    // A. Registrar nuevo donante si es necesario
    if (!donante_id && nuevo_donante) {
      const res = await db.query(
        'INSERT INTO donantes (nombre) VALUES ($1) RETURNING id',
        [nuevo_donante]
      );
      donante_id = res.rows[0].id;
    }

    // B. Crear donación principal
    const donacionRes = await db.query(
      `INSERT INTO donaciones (
        donante_id, tipo_material, estado, observaciones, usuario_registro
      ) VALUES ($1, $2, $3, $4, $5) RETURNING id`,
      [donante_id, tipo_material, estado, observaciones, usuarioAdminId]
    );
    const donacionId = donacionRes.rows[0].id;
console.log('Items recibidos:', items);

    // C. Procesar cada ítem
    for (const [index, item] of items.entries()) {
      if (!item.titulo) continue;

      // 1. Insertar libro
      const libroRes = await db.query(
        `INSERT INTO libros (
          titulo, autor, editorial, anio_publicacion, isbn, 
          origen, donacion_id, disponible, fecha_registro,
          fecha_ingreso, estado, valor_estimado
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) RETURNING id`,
        [
          item.titulo?.trim() || 'Sin título',
          item.autor?.trim() || null,
          item.editorial?.trim() || null,
          item.anio_publicacion ? parseInt(item.anio_publicacion) : null,
          item.isbn || `DON-${Date.now()}-${index}`,
          'donacion',
          donacionId,
          true,
          new Date(),
          new Date(),
          'disponible',
          item.valor ? parseFloat(item.valor) : 0.00
        ]
      );
      const libroId = libroRes.rows[0].id;

      // 2. Crear ejemplar
      await db.query(
        `INSERT INTO ejemplares (
          libro_id, codigo_barras, estado, fecha_registro
        ) VALUES ($1, $2, $3, $4)`,
        [
          libroId,
          `EJM-${libroId}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,
          'disponible',
          new Date()
        ]
      );

      // 3. Registrar ítem de donación
      await db.query(
        `INSERT INTO items_donacion (
          donacion_id, libro_id, titulo, autor, editorial, 
          anio_publicacion, isbn, cantidad, procesado
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)`,
        [
          donacionId,
          libroId,
          item.titulo?.trim() || 'Sin título',
          item.autor?.trim() || null,
          item.editorial?.trim() || null,
          item.anio_publicacion ? parseInt(item.anio_publicacion) : null,
          item.isbn || null,
          1,
          true
        ]
      );

      // 4. Procesar foto del material si existe
      const foto = fotos[index];
      if (foto && foto.size > 0) {
        const bytes = await foto.arrayBuffer();
        await db.query(
          `INSERT INTO imagenes_material (
            libro_id, nombre_archivo, contenido, tipo_mime
          ) VALUES ($1, $2, $3, $4)`,
          [
            libroId,
            foto.name,
            Buffer.from(bytes),
            foto.type
          ]
        );
      }
    }

    await db.query('COMMIT');
    success = true;
  } catch (e) {
    await db.query('ROLLBACK');
    error = `Error al registrar donación: ${e.message}`;
    console.error('Error completo:', e);
  }
}
---
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Nueva Donación</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
  <AdminLayout title="Nueva Donación">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Encabezado -->
      <div class="flex items-center justify-between mb-8">
        <h1 class="text-2xl font-bold text-gray-900 flex items-center">
          <i class="fas fa-hand-holding-heart text-indigo-600 mr-3 text-3xl"></i>
          <span>Registrar Nueva Donación</span>
        </h1>
        <a href="/donaciones" class="text-indigo-600 hover:text-indigo-800 flex items-center">
          <i class="fas fa-list mr-2"></i> Ver donaciones
        </a>
      </div>

      {error && (
        <div class="mb-6 p-4 bg-red-50 border-l-4 border-red-500 rounded">
          <div class="flex items-center">
            <i class="fas fa-exclamation-circle text-red-500 mr-3 text-xl"></i>
            <span class="text-red-700 font-medium">{error}</span>
          </div>
        </div>
      )}

      {success && (
        <div class="mb-6 p-4 bg-green-50 border-l-4 border-green-500 rounded">
          <div class="flex items-center justify-between">
            <div class="flex items-center">
              <i class="fas fa-check-circle text-green-500 mr-3 text-xl"></i>
              <span class="text-green-700 font-medium">¡Donación registrada exitosamente!</span>
            </div>
            <a href="/donaciones" class="text-green-600 hover:text-green-800 underline flex items-center">
              Ver lista <i class="fas fa-chevron-right ml-2 text-sm"></i>
            </a>
          </div>
        </div>
      )}

      <!-- Formulario de donación -->
      <div class="bg-white shadow rounded-lg overflow-hidden">
        <div class="p-6 border-b border-gray-200 bg-indigo-50"> 
          <h2 class="text-lg font-medium text-gray-900 flex items-center">
            <i class="fas fa-info-circle text-indigo-600 mr-3"></i>
            Información de la Donación
          </h2>
        </div>

        <form method="POST" class="p-6 space-y-6" enctype="multipart/form-data">
          <div class="space-y-6">
            <!-- Donante -->
            <div class="bg-indigo-50 p-4 rounded-lg border border-indigo-100">
              <label class="block text-sm font-medium text-gray-700 mb-1">
                <span class="flex items-center">
                  <i class="fas fa-user-tag text-indigo-500 mr-2"></i>
                  Información del Donante
                </span>
              </label>
              <input type="text" name="nuevo_donante" required class="mt-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md border p-2" placeholder="Nombre completo del donante" />
              <p class="mt-1 text-xs text-gray-500">Ingrese el nombre de la persona u organización que realiza la donación</p>
            </div>

            <!-- Tipo de material y estado -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  <span class="flex items-center">
                    <i class="fas fa-book text-gray-500 mr-2"></i>
                    Tipo de material
                  </span>
                </label>
                <select name="tipo_material" required class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md border">
                  <option value="Libro">Libro</option>
                  <option value="Revista">Revista</option>
                  <option value="Multimedia">Multimedia</option>
                  <option value="Equipo">Equipo</option>
                  <option value="Otro">Otro</option>
                </select>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  <span class="flex items-center">
                    <i class="fas fa-check-circle text-gray-500 mr-2"></i>
                    Estado
                  </span>
                </label>
                <select name="estado" required class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md border">
                  {estadosPermitidos.map(estado => (
                    <option value={estado}>{estado}</option>
                  ))}
                </select>
              </div>
            </div>

            <!-- Aviso sobre valor -->
            <div id="aviso-valor" style="display: none;" class="bg-yellow-50 border-l-4 border-yellow-400 p-4">
              <div class="flex">
                <div class="flex-shrink-0">
                  <i class="fas fa-exclamation-triangle text-yellow-400 text-xl mr-3"></i>
                </div>
                <div class="ml-1">
                  <p class="text-sm text-yellow-700">
                    Para materiales con valor superior a $500, es requerido adjuntar una fotografía como comprobante.
                  </p>
                </div>
              </div>
            </div>

            <!-- Campos para los materiales -->
            <div id="campos-libro" class="space-y-6 pt-6 border-t border-gray-200">
              <div class="space-y-4">
                <h3 class="text-md font-medium text-gray-900 flex items-center">
                  <i class="fas fa-book-open text-indigo-500 mr-3"></i>
                  Materiales Donados
                </h3>
                
                <div id="items-container">
                  <div class="item-donacion bg-gray-50 p-4 rounded-lg space-y-4 border border-gray-200">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">
                          <i class="fas fa-heading text-gray-400 mr-1 text-xs"></i> Título*
                        </label>
                        <input type="text" name="titulo[]" required class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md border p-2" />
                      </div>

                      <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">
                          <i class="fas fa-user-edit text-gray-400 mr-1 text-xs"></i> Autor
                        </label>
                        <input type="text" name="autor[]" class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md border p-2" />
                      </div>

                      <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">
                          <i class="fas fa-building text-gray-400 mr-1 text-xs"></i> Editorial
                        </label>
                        <input type="text" name="editorial[]" class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md border p-2" />
                      </div>

                      <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">
                          <i class="fas fa-calendar-alt text-gray-400 mr-1 text-xs"></i> Año de publicación
                        </label>
                        <input type="number" name="anio_publicacion[]" class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md border p-2" />
                      </div>

                      <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">
                          <i class="fas fa-tag text-gray-400 mr-1 text-xs"></i> Valor estimado
                        </label>
                        <input type="number" step="0.01" name="valor[]" class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md border p-2" />
                      </div>


                      <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700 mb-1">
                          <i class="fas fa-barcode text-gray-400 mr-1 text-xs"></i> ISBN / Código
                        </label>
                        <input type="text" name="isbn[]" class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md border p-2" />
                        <p class="mt-1 text-xs text-gray-500">Dejar vacío para generar automáticamente</p>
                      </div>
                    </div>
                  </div>
                </div>

            <!-- Observaciones -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">
                <span class="flex items-center">
                  <i class="fas fa-comment-alt text-gray-500 mr-2"></i>
                  Observaciones
                </span>
              </label>
              <textarea name="observaciones" rows="3" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md border p-2" placeholder="Notas adicionales sobre la donación"></textarea>
            </div>
          </div>

          <!-- Botón de envío -->
          <div class="flex justify-end pt-6 border-t border-gray-200">
            <button type="submit" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out">
              <i class="fas fa-save mr-2"></i>
              Registrar Donación
            </button>
          </div>
        </form>
      </div>
    </div>
  </AdminLayout>

  <script>
    // Funciones JavaScript para el manejo del formulario
    function agregarItem() {
      const contenedor = document.getElementById('items-container');
      const items = document.querySelectorAll('.item-donacion');
      const nuevoItem = items[0].cloneNode(true);
      
      // Limpiar inputs
      nuevoItem.querySelectorAll('input').forEach(input => {
        if (input.type !== 'file') input.value = '';
        if (input.type === 'file') input.value = '';
      });
      
      contenedor.appendChild(nuevoItem);
    }

    function mostrarVistaPrevia(input, contenedorId) {
      if (input.files && input.files[0]) {
        const reader = new FileReader();
        reader.onload = function(e) {
          document.getElementById(contenedorId).innerHTML = `
            <img src="${e.target.result}" class="h-24 w-auto object-cover rounded mt-2">
          `;
        }
        reader.readAsDataURL(input.files[0]);
      }
    }

    function prepararEnvio() {
      const items = [];
      
      document.querySelectorAll('.item-donacion').forEach((itemDiv, index) => {
        const itemData = {
          titulo: itemDiv.querySelector('[name="titulo[]"]').value,
          autor: itemDiv.querySelector('[name="autor[]"]').value,
          editorial: itemDiv.querySelector('[name="editorial[]"]').value,
          anio_publicacion: itemDiv.querySelector('[name="anio_publicacion[]"]').value,
          isbn: itemDiv.querySelector('[name="isbn[]"]').value,
          valor: itemDiv.querySelector('[name="valor[]"]').value || 0
        };
        
        items.push(itemData);
      });
      
      // Validar que al menos un item tenga título
      if (items.length === 0 || items.some(item => !item.titulo)) {
        alert('Debe ingresar al menos un material con título');
        return false;
      }
      
      // Crear input hidden para los items
      let itemsInput = document.getElementById('items-json');
      if (!itemsInput) {
        itemsInput = document.createElement('input');
        itemsInput.type = 'hidden';
        itemsInput.name = 'items';
        itemsInput.id = 'items-json';
        document.querySelector('form').appendChild(itemsInput);
      }
      itemsInput.value = JSON.stringify(items);
      
      return true;
    }

    window.addEventListener('DOMContentLoaded', () => {
      const form = document.querySelector('form');
      form.setAttribute('enctype', 'multipart/form-data');
      form.onsubmit = prepararEnvio;
    });
  </script>
</body>
</html>
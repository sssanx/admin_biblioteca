---
import AdminLayout from '../layouts/AdminLayout.astro';
const { title = "Perfil del Administrador" } = Astro.props;

// Obtener datos actuales del admin (deberías reemplazar esto con datos reales de tu DB)
const adminData = {
  nombre: "Administrador",
  correo: "admin@biblioteca.com"
};
---

<AdminLayout title={title}>
  <div class="max-w-3xl mx-auto px-6 py-10">
    <!-- Mensaje de estado -->
    <div id="message" class="hidden mb-4 p-4 rounded-md"></div>

    <div class="bg-white rounded-lg shadow-md p-6">
      <h1 class="text-2xl font-semibold mb-6">Perfil del Administrador</h1>

      <form id="profileForm" class="space-y-6">
        <input type="hidden" name="correo_original" value={adminData.correo} />

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
          <input
            type="text"
            name="nombre"
            value={adminData.nombre}
            required
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Correo electrónico</label>
          <input
            type="email"
            name="email"
            value={adminData.correo}
            required
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Cambiar contraseña</label>
          <input
            type="password"
            name="password"
            placeholder="••••••••"
            minlength="8"
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          />
          <p class="mt-1 text-xs text-gray-500">Mínimo 8 caracteres</p>
        </div>

        <div class="flex justify-end pt-4">
          <button
            type="submit"
            class="btn-save flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Guardar cambios
          </button>
        </div>
      </form>
    </div>
  </div>

  <script>
    document.getElementById('profileForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const form = e.target;
      const formData = new FormData(form);
      const messageDiv = document.getElementById('message');
      const submitBtn = form.querySelector('button[type="submit"]');
      
      // Mostrar estado de carga
      submitBtn.disabled = true;
      submitBtn.innerHTML = `
        <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Guardando...
      `;

      try {
        const response = await fetch('/api/editar_admin', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (response.ok) {
          // Mostrar mensaje de éxito
          messageDiv.innerHTML = `
            <div class="flex items-center bg-green-50 text-green-800 p-3 rounded-md">
              <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
              ${result.message}
            </div>
          `;
          messageDiv.classList.remove('hidden');
          
          // Ocultar mensaje después de 3 segundos
          setTimeout(() => {
            messageDiv.classList.add('hidden');
          }, 3000);
        } else {
          // Mostrar mensaje de error
          messageDiv.innerHTML = `
            <div class="flex items-center bg-red-50 text-red-800 p-3 rounded-md">
              <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
              ${result.error || 'Error al guardar los cambios'}
            </div>
          `;
          messageDiv.classList.remove('hidden');
        }
      } catch (error) {
        console.error('Error:', error);
        messageDiv.innerHTML = `
          <div class="flex items-center bg-red-50 text-red-800 p-3 rounded-md">
            <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
            Error de conexión con el servidor
          </div>
        `;
        messageDiv.classList.remove('hidden');
      } finally {
        // Restaurar botón
        submitBtn.disabled = false;
        submitBtn.innerHTML = 'Guardar cambios';
      }
    });
  </script>

  <style is:global>
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .animate-spin {
      animation: spin 1s linear infinite;
    }
  </style>
</AdminLayout>